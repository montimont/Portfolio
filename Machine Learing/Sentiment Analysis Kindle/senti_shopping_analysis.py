# -*- coding: utf-8 -*-
"""Senti_Shopping_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cvjBIFXZxTEQEcYknCw16v3ifj10F-LS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

!pip install transformers

kindle = pd.read_csv('/content/all_kindle_review .csv')
df = kindle.drop(columns = ['Unnamed: 0','Unnamed: 0.1','helpful','reviewTime','reviewerID','reviewerName','summary','unixReviewTime'])
df.head()

grph = df['rating'].value_counts().sort_index().plot(kind='bar', title='Count By Rating', figsize=(10,5))
grph.set_xlabel('Book Rating')
plt.show()



"""###Vader Seniment Scoring"""

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm
nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row['reviewText']
    myid = row['asin']
    if isinstance(text, str):
        res[myid] = sia.polarity_scores(text)
    else:
        print(f"Skipping row {i} with non-string value in 'Tweet_content' column")

pd.DataFrame(res).T

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'asin'})
vaders = vaders.merge(df, how='left')

vaders

ax = sns.barplot(data=vaders, x='rating', y='compound' )
ax.set_title('Compound Score By Rating')
plt.show()

"""### Roberta Pretrained Model"""

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f'cardiffnlp/twitter-roberta-base-sentiment'
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

def polarity_scores_roberta(example, max_length=512):
  encoded_text = tokenizer(example, truncation=True, padding=True, max_length=max_length, return_tensors='pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores = np.array(scores)
  scores = scores.reshape(3)
  scores_dict = {
      'roberta_neg' : scores[0],
      'roberta_neu' : scores[1],
      'roberta_pos' : scores[2]
  }
  return scores_dict

import itertools

res = {}
for i, row in tqdm(itertools.islice(df.iterrows(), 200), total=200):
    text = row['reviewText']
    myid = row['asin']
    if isinstance(text, str):
        vader_results = sia.polarity_scores(text)
        vader_results_rename = {}
        for key, value in vader_results.items():
          vader_results_rename[f'vader_{key}'] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_results_rename, **roberta_result}
        res[myid] = both
    else:
        print(f"Skipping row {i} with non-string value in 'Tweet_content' column")

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = pd.merge(df, results_df, how='left', left_index=True, right_index=True)

results_df.head()

sns.pairplot(data=results_df, vars=['vader_neg', 'vader_neu', 'vader_pos','roberta_neg', 'roberta_neu', 'roberta_pos'], hue='rating', palette='tab10')
plt.show()